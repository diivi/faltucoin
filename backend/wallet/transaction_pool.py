

class TransactionPool:
  """
  stores transactions not yet added to the blockchain 
  """
  def __init__(self):
    self.transaction_map = {}
    
  def add_transaction(self, transaction):
    """
    Add a transaction in the transaction pool
    """
    self.transaction_map[transaction.id] = transaction

  def existing_transaction(self, address):
    """
    find a transaction generated by the address in the transaction pool
    """
    for transaction in self.transaction_map.values():
      if transaction.input['address'] == address:
        return transaction

  def transaction_data(self):
    """
    return transactions of the transaction pool represented in their serialized form
    """
    return list(map(lambda transaction: transaction.to_json(),self.transaction_map.values()))

  def clear_blockchain_transactions(self,blockchain):
    """
    Delete transactions that are included in the blockchain from the transaction pool
    """
    for block in blockchain.chain:
      for transaction in block.data:
        try:
          del self.transaction_map[transaction['id']]
        except KeyError:
          pass